#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

// Подынтегральная функция: x^2 * e^{-x}
double f(double x) {
    return x * x * exp(-x);
}

// Метод Симпсона
double simpson_integral(double a, double b, double eps) {
    int segments = 2;
    double integral_prev = 0.0;
    double error = eps + 1.0;

    while (error > eps) {
        double h = (b - a) / segments;
        double integral_current = 0.0;

        for (int i = 0; i < segments; i++) {
            double x0 = a + i * h;
            double x1 = x0 + h / 2;
            double x2 = x0 + h;

            integral_current += (f(x0) + 4 * f(x1) + f(x2)) * h / 6;
        }

        if (segments > 2) {
            error = fabs(integral_current - integral_prev) / 15.0;
        }

        integral_prev = integral_current;
        segments *= 2;
    }

    return integral_prev;
}

int main() {
    double a = 0.0;
    double L = 20.0; // Аппроксимация бесконечности
    double eps = 1e-6;

    double result = simpson_integral(a, L, eps);

    cout << fixed << setprecision(8);
    cout << "Метод Симпсона: " << result << endl;

    return 0;
}
