#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

// Подынтегральная функция
double f(double x) {
    return 1.0 / ((1 + x) * sqrt(x));
}

// Метод трапеций для конечного интервала
double trapezoidal_integral(double a, double b, double eps) {
    int segments = 2;
    double integral_prev = 0.0;
    double error = eps + 1.0;

    while (error > eps) {
        double h = (b - a) / segments;
        double integral_current = (f(a) + f(b)) / 2.0;

        for (int i = 1; i < segments; i++) {
            integral_current += f(a + i * h);
        }
        integral_current *= h;

        if (segments > 2) {
            error = fabs(integral_current - integral_prev) / 3.0;
        }

        integral_prev = integral_current;
        segments *= 2;
    }

    return integral_prev;
}

// Адаптация для бесконечного предела
double improper_trapezoidal(double a, double eps) {
    double b = a + 1.0;
    double integral = 0.0;
    double partial, threshold = eps * 100;

    do {
        partial = trapezoidal_integral(a, b, eps/10);
        integral += partial;
        a = b;
        b *= 2;
    } while (fabs(partial) > threshold);

    return integral;
}

int main() {
    double a = 1.0;
    double eps = 1e-6;

    double result = improper_trapezoidal(a, eps);

    cout << fixed << setprecision(8);
    cout << "Метод трапеций: " << result << endl;

    return 0;
}
